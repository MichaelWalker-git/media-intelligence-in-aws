AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Globo DPP backend SAM Template

Parameters:
  Email:
    Type: String
    Description: Email to notify when fail occurs
    Default: youremail@yourprovider.com
  S3Bucket:
    Type: String
    Description: Your Amazon S3 bucket name
    Default: "globo-data-copy"
  DestinationBucket:
    Type: String
    Description: Amazon S3 bucket to bulk frames and audio outputs
    Default: "globo-dev"
  DynamoDBTable:
    Type: String
    Description: Amazon S3 bucket to bulk frames and audio outputs
    Default: 'globo-dpp-dynamo'

Globals:
  Function:
    Runtime: python3.7
    Handler: app.lambda_handler
    Timeout: 300
    MemorySize: 1024
    Layers:
      - !Ref HelperLibrary
    Environment:
      Variables:
        INPUT_BUCKET: !Ref S3Bucket
        RESULTS_BUCKET: !Ref DestinationBucket
        DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
        ALL_ANALYSIS_NAME: "ALL_AVAILABLE"

Resources:
  #############
  # IAM Roles #
  #############
  MediaConvertS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - mediaconvert.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: MediaConvertS3RolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
                  - !Sub "arn:aws:s3:::${DestinationBucket}/*"
        - PolicyName: MediaConvertCloudWatchEventsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:*
                  - sns:*
                  - logs:*
                Resource:
                  - "*"
  LambdaMediaConvertRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: LambdaMediaConvertRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - mediaconvert:GetJob
                  - mediaconvert:ListJobs
                  - mediaconvert:DescribeEndpoints
                  - mediaconvert:CreateJob
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt MediaConvertS3Role.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Delete*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}"
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}/*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"
  LambdaRekognitionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: LambdaRekognitionPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                  - rekognition:CompareFaces
                  - rekognition:DetectFaces
                  - rekognition:ListCollections
                  - rekognition:ListFaces
                  - rekognition:SearchFaces
                  - rekognition:SearchFacesByImage
                  - rekognition:DetectText
                  - rekognition:GetCelebrityInfo
                  - rekognition:RecognizeCelebrities
                  - rekognition:DetectModerationLabels
                  - rekognition:GetLabelDetection
                  - rekognition:GetFaceDetection
                  - rekognition:GetContentModeration
                  - rekognition:GetCelebrityRecognition
                  - rekognition:GetFaceSearch
                  - rekognition:GetTextDetection
                  - rekognition:GetSegmentDetection
                  - rekognition:DetectCustomLabels
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
                  - !Sub "arn:aws:s3:::${DestinationBucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Delete*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}"
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}/*"
  APILambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: LambdaWorkflowRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
                  - !Sub "arn:aws:s3:::${DestinationBucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
  ####################
  #         API      #
  ####################
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: RestAPI
      StageName: Prod
      Auth:
        ApiKeyRequired: true
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  ####################
  # Lambda Functions #
  ####################
  AudioFrameExtractor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: video_analysis/audio_frame_extraction/
      Handler: audio-frame-extractor.lambda_handler
      Role: !GetAtt LambdaMediaConvertRole.Arn
      Environment:
        Variables:
          MEDIACONVERT_ROLE: !GetAtt MediaConvertS3Role.Arn
          MEDIACONVERT_DESTINATION_BUCKET: !Ref DestinationBucket
  MediaConvertJobChecker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: video_analysis/media_convert_job_checker/
      Handler: media-convert-job-checker.lambda_handler
      Role: !GetAtt LambdaMediaConvertRole.Arn
      Environment:
        Variables:
          SNS_TOPIC: !Ref VideoAnalysisTopic
          MC_JOB_INDEX_NAME: "MediaConvertJobIndex"
  SceneClassification:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: video_analysis/scene_classification/
      Handler: scene-classification.lambda_handler
      Role: !GetAtt LambdaRekognitionRole.Arn
      Timeout: 900
      Environment:
        Variables:
          ANALYSIS_NAME: "SCENE_CLASSIFICATION"
  VideoAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/start_analysis/
      Handler: main.handler
      Role: !GetAtt APILambdaRole.Arn
      Environment:
        Variables:
          START_ANALYSIS_FUNCTION: !Ref AudioFrameExtractor
          GET_ANALYSIS_STATUS: "status_function"
      Events:
        StartVideoAnalysis:
          Type: Api
          Properties:
            Path: /video_analysis
            Method: POST
            RestApiId: !Ref RestAPI
            Auth:
              ApiKeyRequired: true
        GetVideoAnalysisList:
          Type: Api
          Properties:
            Path: /video_analysis
            Method: GET
            RestApiId: !Ref RestAPI
            Auth:
              ApiKeyRequired: true
        GetVideoAnalysisJob:
          Type: Api
          Properties:
            Path: /video_analysis/{analysis_uuid}
            Method: GET
            RestApiId: !Ref RestAPI
            Auth:
              ApiKeyRequired: true
  ####################
  #Lambda Permissions#
  ####################
  MCLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref MediaConvertTopic
      FunctionName: !GetAtt MediaConvertJobChecker.Arn
  SceneClassificationLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref VideoAnalysisTopic
      FunctionName: !GetAtt SceneClassification.Arn
  #####################
  #Lambda Custom Layer#
  #####################
  HelperLibrary:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: "HelperLibrary"
      Description: "Library of different reusable helpers"
      ContentUri: helper_library/
      CompatibleRuntimes:
        - python3.7
  ####################
  #    SNS Topics    #
  ####################
  MediaConvertTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            !GetAtt MediaConvertJobChecker.Arn
          Protocol: "lambda"
      TopicName: "MediaConvertJobStatus"
  VideoAnalysisTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            !GetAtt SceneClassification.Arn
          Protocol: "lambda"
      TopicName: "VideoAnalysisTopic"
  ################
  # IAM Policies #
  ################
  EventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: "*"
      Topics:
        - !Ref MediaConvertTopic
  ####################
  #    CloudWatch    #
  ####################
  MediaConvertJobEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - "aws.mediaconvert"
        detail-type:
          - "MediaConvert Job State Change"
        detail:
          status:
            - "COMPLETE"
            - "ERROR"
      Targets:
        -
          Arn: !Ref MediaConvertTopic
          Id: "MCJobsTopic"
          InputTransformer:
            InputPathsMap:
              job_id: "$.detail.jobId"
            InputTemplate: |
              "job_id:<job_id>"
  ####################
  #  DynamoDB Table  #
  ####################
  VideoAnalysisTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
        - AttributeName: mediaconvert_job_id
          AttributeType: S
        - AttributeName: file_name
          AttributeType: S
        - AttributeName: creation_timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
        - AttributeName: file_name
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: MediaConvertJobIndex
          KeySchema:
            - AttributeName: mediaconvert_job_id
              KeyType: HASH
            - AttributeName: uuid
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: TimeStampIndex
          KeySchema:
            - AttributeName: creation_timestamp
              KeyType: HASH
            - AttributeName: uuid
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TableName: !Ref DynamoDBTable

#####################
#       OUTPUTS     #
#####################
Outputs:
  RestAPIUrl:
    Value: !Sub "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"