AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Globo DPP backend SAM Template

Parameters:
  Email:
    Type: String
    Description: Email to notify when fail occurs
    Default: "arbahena@amazon.com"
  S3Bucket:
    Type: String
    Description: Your Amazon S3 bucket name
    Default: "globo-data-copy"
  DestinationBucket:
    Type: String
    Description: Amazon S3 bucket to bulk frames and audio outputs
    Default: "globo-dev"
  ESDomainName:
    Type: String
    Description: Amazon ElasticSearch Domain name
    Default: 'globo-dpp-es-domain'
  CognitoDomainName:
    Type: String
    Description: Amazon Cognito Domain name (Has to be unique)
    Default: 'globo-dpp-es-kibana'
  DynamoDBTable:
    Type: String
    Default: "globo-jobs"
  CelebrityCollectionID:
    Type: String
    Default: "bra-celebs"
  StageName:
    Type: String
    Default: "Prod"
  OSCDictionary:
    Type: String
    Default: "osc_files/dictionary.json"

Globals:
  Function:
    Runtime: python3.7
    Handler: app.lambda_handler
    Timeout: 300
    MemorySize: 1024
    Layers:
      - !Ref Shared
    Environment:
      Variables:
        STAGE: !Ref StageName
        MIN_ACCURACY: 80

Resources:
  #############
  # IAM Roles #
  #############
  MediaConvertS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - mediaconvert.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: MediaConvertS3RolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
                  - !Sub "arn:aws:s3:::${DestinationBucket}/*"
        - PolicyName: MediaConvertCloudWatchEventsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:*
                  - sns:*
                  - logs:*
                Resource:
                  - "*"
  LambdaMediaConvertRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: LambdaMediaConvertRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - mediaconvert:GetJob
                  - mediaconvert:ListJobs
                  - mediaconvert:DescribeEndpoints
                  - mediaconvert:CreateJob
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt MediaConvertS3Role.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Delete*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}"
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}/*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"
  LambdaRekognitionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: LambdaRekognitionPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                  - rekognition:CompareFaces
                  - rekognition:DetectFaces
                  - rekognition:ListCollections
                  - rekognition:ListFaces
                  - rekognition:SearchFaces
                  - rekognition:SearchFacesByImage
                  - rekognition:StartTextDetection
                  - rekognition:GetTextDetection
                  - rekognition:DetectText
                  - rekognition:GetCelebrityInfo
                  - rekognition:RecognizeCelebrities
                  - rekognition:DetectModerationLabels
                  - rekognition:GetLabelDetection
                  - rekognition:GetFaceDetection
                  - rekognition:GetContentModeration
                  - rekognition:GetCelebrityRecognition
                  - rekognition:GetFaceSearch
                  - rekognition:GetTextDetection
                  - rekognition:GetSegmentDetection
                  - rekognition:DetectCustomLabels
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
                  - !Sub "arn:aws:s3:::${DestinationBucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Delete*
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}"
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}/*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
  APILambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: LambdaWorkflowRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
                  - !Sub "arn:aws:s3:::${DestinationBucket}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
              - Effect: Allow
                Action:
                  - dynamodb:Get*
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}"
                  - !Sub "arn:aws:dynamodb:*:*:table/${DynamoDBTable}/*"
  ####################
  #        API       #
  ####################
  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: RestAPI
      StageName: !Ref StageName
      Auth:
        ApiKeyRequired: true
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: !Sub "${AWS::StackName}-usage-plan"
          Description: Customer usage plan
          Quota:
            Limit: 5000
            Period: MONTH
          Throttle:
            BurstLimit: 200
            RateLimit: 100
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'GET,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  ####################
  # Lambda Functions #
  ####################
  StartAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/start_analysis/
      Handler: main.lambda_handler
      Role: !GetAtt LambdaMediaConvertRole.Arn
      Environment:
        Variables:
          DDB_TABLE: !Ref DynamoDBTable
          MEDIA_CONVERT_ARN: !GetAtt MediaConvertS3Role.Arn
          DEST_S3_BUCKET: !Ref DestinationBucket
          IN_S3_BUCKET: !Ref S3Bucket
          SNS_TOPIC: !Ref VideoAnalysisTopic
      Events:
        StartVideoAnalysis:
          Type: Api
          Properties:
            Path: /analysis/start
            Method: POST
            RestApiId: !Ref RestAPI
            Auth:
              ApiKeyRequired: true
  SearchAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/search_analysis/
      Handler: main.lambda_handler
      Role: !GetAtt NestedStack.Outputs.LambdaRole
      Environment:
        Variables:
          DOMAIN_ENDPOINT: !GetAtt NestedStack.Outputs.ESDomainEndpoint
      Events:
        StartVideoAnalysis:
          Type: Api
          Properties:
            Path: /analysis/search
            Method: POST
            RestApiId: !Ref RestAPI
            Auth:
             ApiKeyRequired: true
  MediaConvertJobChecker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: video_analysis/media_convert_job_checker/
      Handler: media-convert-job-checker.lambda_handler
      Role: !GetAtt LambdaMediaConvertRole.Arn
      Environment:
        Variables:
          SNS_TOPIC: !Ref VideoAnalysisTopic
          SNS_EMAIL_TOPIC: !Ref EmailTopic
          IN_S3_BUCKET: !Ref S3Bucket
          DDB_TABLE: !Ref DynamoDBTable
  GetAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/query_analysis/
      Handler: main.lambda_handler
      Role: !GetAtt APILambdaRole.Arn
      Environment:
        Variables:
          DDB_TABLE: !Ref DynamoDBTable
          ANALYSIS_LIST: "['osc','bft','bfl','cff']"
      Events:
        GetVideoAnalysis:
          Type: Api
          Properties:
            Path: /analysis/
            Method: POST
            RestApiId: !Ref RestAPI
            Auth:
              ApiKeyRequired: true
  ######################
  # Analysis Functions #
  ######################
  SceneClassification:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: analysis/object_scene_classification/
      Handler: osc.lambda_handler
      Role: !GetAtt LambdaRekognitionRole.Arn
      Timeout: 900
      Environment:
        Variables:
          IN_S3_BUCKET: !Ref S3Bucket
          DDB_TABLE: !Ref DynamoDBTable
          DEST_S3_BUCKET: !Ref DestinationBucket
          ES_LAMBDA_ARN: !GetAtt ESLambda.Arn
          OSC_DICT: !Ref OSCDictionary
  BrandFromTextAnalysis:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: analysis/brand_from_text/
      Handler: bft.lambda_handler
      Role: !GetAtt LambdaRekognitionRole.Arn
      Environment:
        Variables:
          DDB_TABLE: !Ref DynamoDBTable
          IN_S3_BUCKET: !Ref S3Bucket
          DEST_S3_BUCKET: !Ref DestinationBucket
          SIM_THRESHOLD: 0.7
          ES_LAMBDA_ARN: !GetAtt ESLambda.Arn
  BrandFromLogoAnalysis:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: analysis/brand_from_logo/
      Handler: bfl.lambda_handler
      Role: !GetAtt LambdaRekognitionRole.Arn
      Environment:
        Variables:
          DDB_TABLE: !Ref DynamoDBTable
          IN_S3_BUCKET: !Ref S3Bucket
          DEST_S3_BUCKET: !Ref DestinationBucket
          CONFIDENCE_THRESHOLD: 50.0
          ES_LAMBDA_ARN: !GetAtt ESLambda.Arn
          MODEL_ARN: arn:aws:rekognition:us-east-1:728516303426:project/globo-brands-cl/version/globo-brands-cl.2021-04-20T09.07.16/1618920437011
  CelebritiesFromFramesAnalysis:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: analysis/celebrity_from_frames/
      Handler: cff.lambda_handler
      Role: !GetAtt LambdaRekognitionRole.Arn
      Environment:
        Variables:
          DDB_TABLE: !Ref ResultsTable
          IN_S3_BUCKET: !Ref S3Bucket
          DEST_S3_BUCKET: !Ref DestinationBucket
          CELEBRITY_COLLECTION_ID: !Ref CelebrityCollectionID
          ES_LAMBDA_ARN: !GetAtt ESLambda.Arn
  ######################
  # Lambda Permissions #
  ######################
  MCLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref MediaConvertTopic
      FunctionName: !GetAtt MediaConvertJobChecker.Arn
  SceneClassificationLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref VideoAnalysisTopic
      FunctionName: !GetAtt SceneClassification.Arn
  BrandFromTextLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref VideoAnalysisTopic
      FunctionName: !GetAtt BrandFromTextAnalysis.Arn
  CelebritiesFromFramesLambdaInvokePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref VideoAnalysisTopic
      FunctionName: !GetAtt CelebritiesFromFramesAnalysis.Arn
  #################
  # ElasticSearch #
  #################
  NestedStack:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      TemplateURL: es_stack.yaml
      Parameters:
        ESDomainName: !Ref ESDomainName
        CognitoDomainName: !Ref CognitoDomainName

  ESLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda
      Handler: esindex.lambda_handler
      Role: !GetAtt NestedStack.Outputs.LambdaRole
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
          DOMAIN_ENDPOINT: !GetAtt NestedStack.Outputs.ESDomainEndpoint
  #####################
  #Lambda Custom Layer#
  #####################
  Shared:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: "AnalysisSaver"
      Description: "Library to save results from analysis to DynamoDB and ElastiSearch"
      ContentUri: shared/
      CompatibleRuntimes:
        - python3.7
      RetentionPolicy: Delete
  ####################
  #    SNS Topics    #
  ####################
  MediaConvertTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            !GetAtt MediaConvertJobChecker.Arn
          Protocol: "lambda"
      TopicName: "MCJobStatus"
  VideoAnalysisTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "VidAnalysisTopic"
  oscSub:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt SceneClassification.Arn
      Protocol: lambda
      FilterPolicy: '{"analysis": ["all", "osc"]}'
      TopicArn: !Ref VideoAnalysisTopic
  bftSub:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt BrandFromTextAnalysis.Arn
      Protocol: lambda
      FilterPolicy: '{"analysis": ["all", "bft"]}'
      TopicArn: !Ref VideoAnalysisTopic
  cffSub:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt CelebritiesFromFramesAnalysis.Arn
      Protocol: lambda
      FilterPolicy: '{"analysis":["all","cff"]}'
      TopicArn: !Ref VideoAnalysisTopic
  bflSub:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt BrandFromLogoAnalysis.Arn
      Protocol: lambda
      FilterPolicy: '{"analysis":["all","bfl"]}'
      TopicArn: !Ref VideoAnalysisTopic
  EmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: NotificationTopic
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email
  ################
  # IAM Policies #
  ################
  EventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: "*"
      Topics:
        - !Ref MediaConvertTopic
  ####################
  #    CloudWatch    #
  ####################
  MediaConvertJobEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - "aws.mediaconvert"
        detail-type:
          - "MediaConvert Job State Change"
        detail:
          status:
            - "COMPLETE"
            - "ERROR"
      Targets:
        -
          Arn: !Ref MediaConvertTopic
          Id: "MCJobsTopic"
          InputTransformer:
            InputPathsMap:
              job_id: "$.detail.jobId"
            InputTemplate: |
              "job_id:<job_id>"
  #####################
  #  DynamoDB Table   #
  #####################
  ResultsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTable
      AttributeDefinitions:
        - AttributeName: S3Key
          AttributeType: S
        - AttributeName: AttrType
          AttributeType: S
        - AttributeName: JobId
          AttributeType: S
      KeySchema:
        - AttributeName: S3Key
          KeyType: HASH
        - AttributeName: AttrType
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: JobIdIndex
          KeySchema:
            - AttributeName: S3Key
              KeyType: HASH
            - AttributeName: JobId
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - analysis
            ProjectionType: INCLUDE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: cost
          Value: aws-ee
#####################
#       OUTPUTS     #
#####################
Outputs:
  RestAPIUrl:
    Value: !Sub "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"